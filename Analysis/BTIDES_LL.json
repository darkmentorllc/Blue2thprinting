{
  "$id": "http://darkmentor.com/BT_JSON_schema",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Does this even show up anywhere? XXX?",
  "description": "JSON Schema for Bluetooth Device Information. Sub-information, Link Layer packet information data types",
  "type": "object",
  "properties": {
    "LLArray": {
      "type": "array",
      "items": {
	"anyOf": [
	  {"$ref": "#/definitions/LL_VERSION_IND"},
	  {"$ref": "#/definitions/LL_VERSION_IND2"},
	  {"$ref": "#/definitions/LL_LENGTH_REQ"},
	  {"$ref": "#/definitions/LL_LENGTH_REQ2"},
	  {"$ref": "#/definitions/LL_PHY_REQ"},
	  {"$ref": "#/definitions/LL_PHY_REQ2"}
	]
      }
    }
  },
  "definitions": {
    "LL_VERSION_IND": {
      "type": "object",
      "description": "Structure for LL\\_VERSION\\_IND packet.",
      "required": [ "version", "company_id", "subversion" ],
      "properties": {
        "$comment": "I'm only putting these fields up to the top level definitions so I can reference them from LMP as well, since they're the same meaning/values.",
	"std_optional_fields": { "$ref": "BTIDES_base.json#/definitions/std_optional_fields" },
	"opcode": {
		"description": "Optional field just if you don't want to look up the opcode for this packet type.",
		"const": 12
	},
	"version": { "$ref": "#/definitions/version" },
	"company_id": { "$ref": "#/definitions/company_id" },
        "subversion": { "$ref": "#/definitions/subversion" }
      }
    },
    "version": {
	"description": "One byte value indicating version of the BT Core Specification that this device comforms to.\n e.g. 0x06 = 4.0, 0x08 = 4.2, 0x09 = 5.0, 0x0D = 5.4 etc. See Assigned Numbers document. \n Only setting an upper bound to enforce sanity checking that this is a single byte value.",
	"type": "integer",
	"minimum": 0,
	"maximum": 255
    },
    "company_id": {
	"description": "Company ID as assigned by Bluetooth SIG. See assigned\\_numbers/company\\_identifiers/company\\_identifiers.yaml from https://bitbucket.org/bluetooth-SIG/public. \n Only setting an upper bound to enforce sanity checking that this is a two-byte value.",
	"type": "integer",
	"minimum": 0,
	"maximum": 65535
    },
    "subversion": {
	"description": "This is nominally the sub-version of the BT controller itself (i.e. hardware). This value is arbitrary, and picked by the hardware maker. \n The correspondance of certain values to certain hardware is known for some vendors like Broadcom, but is unknown for most vendors.\n Only setting an upper bound to enforce sanity checking that this is a two-byte value.",
	"type": "integer",
	"minimum": 0,
	"maximum": 65535
    },
    "LL_VERSION_IND2": {
      "type": "object",
      "description": "Structure for LL\\_VERSION\\_IND packet, as single raw hex string.",
      "required": [ "full_pkt_hex_str" ],
      "properties": {
	"std_optional_fields": { "$ref": "BTIDES_base.json#/definitions/std_optional_fields" },
	"opcode": {
		"description": "Optional field just if you don't want to look up the opcode for this packet type.",
		"const": 12
	},
	"full_pkt_hex_str": {"$ref": "BTIDES_base.json#/definitions/full_pkt_hex_str"}
      }
    },
    "LL_LENGTH_REQ": {
      "type": "object",
      "description": "Structure for LL\\_LENGTH\\_REQ packet.",
      "required": [ "MaxRxOctets","MaxRxTime","MaxTxOctets","MaxTxTime" ],
      "properties": {
	"std_optional_fields": { "$ref": "BTIDES_base.json#/definitions/std_optional_fields" },
	"opcode": {
		"description": "Optional field just if you don't want to look up the opcode for this packet type.",
		"const": 14
	},
	"MaxRxOctets": {
		"description": "2-byte MaxRxOctets from BT Core Spec.",
		"type": "integer",
		"minimum": 0,
		"maximum": 65535
	},
	"MaxRxTime": {
		"description": "2-byte MaxRxTime from BT Core Spec.",
		"type": "integer",
		"minimum": 0,
		"maximum": 65535
	},
	"MaxTxOctets": {
		"description": "2-byte MaxTxOctets from BT Core Spec.",
		"type": "integer",
		"minimum": 0,
		"maximum": 65535
	},
	"MaxTxTime": {
		"description": "2-byte MaxTxTime from BT Core Spec.",
		"type": "integer",
		"minimum": 0,
		"maximum": 65535
	}
      }
    },
    "LL_LENGTH_REQ2": {
      "type": "object",
      "description": "Structure for LL\\_LENGTH\\_REQ packet, as single raw hex string.",
      "required": [ "full_pkt_hex_str" ],
      "properties": {
	"std_optional_fields": { "$ref": "BTIDES_base.json#/definitions/std_optional_fields" },
	"opcode": {
		"description": "Optional field just if you don't want to look up the opcode for this packet type.",
		"const": 14
	},
	"full_pkt_hex_str": {"$ref": "BTIDES_base.json#/definitions/full_pkt_hex_str"}
      }
    },
    "LL_PHY_REQ": {
      "type": "object",
      "description": "Structure for LL\\_PHY\\_REQ packet.",
      "required": [ "TX_PHYS", "RX_PHYS" ],
      "properties": {
	"std_optional_fields": { "$ref": "BTIDES_base.json#/definitions/std_optional_fields" },
	"opcode": {
		"description": "Optional field just if you don't want to look up the opcode for this packet type.",
		"const": 16
	},
	"TX_PHYS": {
		"description": "1-byte TX_PHYS from BT Core Spec.",
		"type": "integer",
		"minimum": 0,
		"maximum": 255
	},
	"RX_PHYS": {
		"description": "1-byte RX_PHYS from BT Core Spec.",
		"type": "integer",
		"minimum": 0,
		"maximum": 255
	}
      }
    },
    "LL_PHY_REQ2": {
      "type": "object",
      "description": "Structure for LL\\_PHY\\_REQ packet, as single raw hex string.",
      "required": [ "full_pkt_hex_str" ],
      "properties": {
	"std_optional_fields": { "$ref": "BTIDES_base.json#/definitions/std_optional_fields" },
	"opcode": {
		"description": "Optional field just if you don't want to look up the opcode for this packet type.",
		"const": 16
	},
	"full_pkt_hex_str": {"$ref": "BTIDES_base.json#/definitions/full_pkt_hex_str"}
      }
    }
  }
}
