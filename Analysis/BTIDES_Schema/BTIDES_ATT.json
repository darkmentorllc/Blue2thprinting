{
  "$id": "https://darkmentor.com/BTIDES_Schema/BTIDES_ATT.json",
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "description": "BTIDES ATT packet information data types",
  "type": "object",
  "properties": {
    "ATTArray": {
      "type": "array",
      "items": {
        "anyOf": [
          {"$ref": "#/definitions/ATT_handle_enumeration"},
          {"$ref": "#/definitions/ATT_EXCHANGE_MTU_REQ"},
          {"$ref": "#/definitions/ATT_EXCHANGE_MTU_REQ2"},
          {"$ref": "#/definitions/ATT_EXCHANGE_MTU_RSP"},
          {"$ref": "#/definitions/ATT_EXCHANGE_MTU_RSP2"}
        ]
      }
    }
  },
  "definitions": {
    "ATT_EXCHANGE_MTU_REQ": {
      "type": "object",
      "description": "Structure for ATT\\_EXCHANGE\\_MTU\\_REQ packet.",
      "required": [ "client_rx_mtu" ],
      "properties": {
	"std_optional_fields": { "$ref": "BTIDES_base.json#/definitions/std_optional_fields" },
	"opcode": {
		"description": "Optional field just if you don't want to look up the opcode for this packet type.",
		"const": 2
	},
	"client_rx_mtu": {
		"description": "2-byte \"Client Rx MTU\" from spec. Maximum number of bytes the ATT Client can receive via ATT.",
		"type": "integer",
                "minimum": 0,
                "maximum": 65535
	}
      }
    },
    "ATT_EXCHANGE_MTU_REQ2": {
      "type": "object",
      "description": "Structure for ATT\\_EXCHANGE\\_MTU\\_REQ packet, as single raw hex string.",
      "required": [ "full_pkt_hex_str" ],
      "properties": {
	"std_optional_fields": { "$ref": "BTIDES_base.json#/definitions/std_optional_fields" },
	"opcode": {
		"description": "Optional field just if you don't want to look up the opcode for this packet type.",
		"const": 2
	},
	"full_pkt_hex_str": {"$ref": "BTIDES_base.json#/definitions/full_pkt_hex_str"}
      }
    },
    "ATT_EXCHANGE_MTU_RSP": {
      "type": "object",
      "description": "Structure for ATT\\_EXCHANGE\\_MTU\\_RSP packet.",
      "required": [ "server_rx_mtu" ],
      "properties": {
	"std_optional_fields": { "$ref": "BTIDES_base.json#/definitions/std_optional_fields" },
	"opcode": {
		"description": "Optional field just if you don't want to look up the opcode for this packet type.",
		"const": 3
	},
	"server_rx_mtu": {
		"description": "2-byte \"Server Rx MTU\" from spec. Maximum number of bytes the ATT Server can receive via ATT.",
		"type": "integer",
                "minimum": 0,
                "maximum": 65535
	}
      }
    },
    "ATT_EXCHANGE_MTU_RSP2": {
      "type": "object",
      "description": "Structure for ATT\\_EXCHANGE\\_MTU\\_RSP packet, as single raw hex string.",
      "required": [ "full_pkt_hex_str" ],
      "properties": {
	"std_optional_fields": { "$ref": "BTIDES_base.json#/definitions/std_optional_fields" },
	"opcode": {
		"description": "Optional field just if you don't want to look up the opcode for this packet type.",
		"const": 3
	},
	"full_pkt_hex_str": {"$ref": "BTIDES_base.json#/definitions/full_pkt_hex_str"}
      }
    },
    "ATT_handle_enumeration": {
      "$comment": "Making an array instead of object and leaving out time and RSSI for now, because this is done over many packets, so one would need to mandate a beginning time/RSSI or ending time/RSSI, and I'm not sure I want to spec that out yet.",
      "description": "An array of all known ATT handle number/UUID pairs.",
      "type": "array",
      "items": {
	"$ref": "#/definitions/handle_entry"
      }
    },
    "handle_entry": {
      "type": "object",
      "description": "Structure for ATT enumeration array.",
      "required": [ "handle", "UUID" ],
      "properties": {
        "handle": {
		"description": "2-byte ATT handle number. (Handle 0 is invalid.)",
		"type": "integer",
                "minimum": 1,
                "maximum": 65535
	},
	"UUID": { "$ref": "BTIDES_base.json#/definitions/UUID" }
      }
    }
  }
}
